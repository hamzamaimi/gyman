import { Response } from "express";
import { TENANTS_LIST } from "../constants/tenantConstants";
const crypto = require('crypto');
/**
 * @param length 
 * Containt the length of the password that is going to be generated.
 * @returns 
 * Simply creates a string of random characters from the bytes generated by the crypto module
 */
export const generateRandomPassword = (length = 12) => {
    return crypto.randomBytes(length).toString('base64').slice(0, length);
}

export const isPasswordSecure = (password: string): boolean => {
    // Regular expression to check for at least one uppercase letter and one special character
    const hasUppercase = /[A-Z]/;
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/;
  
    // Check if password meets all the conditions
    return (
      typeof(password) == 'string' &&
      password.length >= 8 && // At least 8 characters
      hasUppercase.test(password) && // Contains at least one uppercase letter
      hasSpecialChar.test(password) // Contains at least one special character
    );
  } 

export const validateRegistrationData = (name: string, lastname:string, email:string, tenant:string) => {
    const errors: string[] = [];

    if(!isValidName(name)){
        errors.push('Name must be at least 2 characters long.');
    }
    if(!isValidLastName(lastname)){
        errors.push('Lastname must be at least 2 characters long.');
    }
    if(!isValidEmail(email)){
        errors.push('The email format is not valid.')
    }else if(!isAvailableEmail(email)){
        errors.push('The email is already taken.')
    }
    
    if(!isValidTenant(tenant)){
        errors.push('Invalid tenant.');
    }

    return errors;
}

const isValidEmail = (email: string): boolean => /^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email);

const isValidName = (name: string): boolean => name.length >= 2; 

const isValidLastName = (lastname: string): boolean => isValidName(lastname);

const isValidTenant = (tenant: string): boolean => TENANTS_LIST.includes(tenant);

/**
 * @todo
 * TO IMPLEMENT!
 */
const isAvailableEmail = (email:string): boolean => {
    return true
}

